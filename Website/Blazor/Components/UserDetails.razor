@using global::Shared.Models
@using System.Security.Claims
@using Newtonsoft.Json
@using Blazor.Components

<!-- User information: Full name + the account balance
    +Buttons for making a new Transfer -->
<AuthorizeView Policy="MustBeClient" Context="Context">
    <div class="box">
        <div class="box-info">
            <select @bind="SelectedAccount">
                @foreach (var account in Accounts)
                {
                    if (account.AccountType.Equals("personal"))
                    {
                        <option>@account.Balance DKK - @account.AccountType.ToUpperInvariant()</option>     
                    }
                }
                @foreach (var account in Accounts)
                {
                    if (account.AccountType.Equals("savings"))
                    {
                        <option>@account.Balance DKK - @account.AccountType.ToUpperInvariant()</option>     
                    }
                }
                @foreach (var account in Accounts)
                {
                    if (account.AccountType.Equals("business"))
                    {
                        <option>@account.Balance DKK - @account.AccountType.ToUpperInvariant()</option>     
                    }
                }
            </select>
        </div>
        <div class="buttons-content">
            <div class="box-buttons">
                <button class="userDetailsButton" @onclick="NewTransfer">New Transfer</button>
            </div>
            <div class="box-buttons">
                <button class="userDetailsButton" @onclick="Deposit">Deposit</button>
            </div>
        </div>
    </div>
</AuthorizeView>


@code {
    [Parameter] public LoadingBox Loading { get; set; }
    [Parameter] public ClaimsPrincipal User { get; set; }
    private List<AccountsInfo> Accounts { get; set; }
    [Inject] private NavigationManager Navigation { get; set; }
    private string SelectedAccount { get; set; } 

    
    
    protected override async Task OnInitializedAsync()
    {
        Accounts = await GetUserAccounts(User);
    }
    
    private void NewTransfer()
    {
        Loading.ShowLoading();
        Navigation.NavigateTo("/Transfer");
    }

    private void Deposit()
    {
        Loading.ShowLoading();
        Navigation.NavigateTo("/Deposit");
    }
    

    private Task<List<AccountsInfo>> GetUserAccounts(ClaimsPrincipal user)
    {
        var accountsClaim = user.FindFirst("Accounts");

        try
        {
            List<AccountsInfo> accounts = JsonConvert.DeserializeObject<List<AccountsInfo>>(accountsClaim!.Value)!;
            return Task.FromResult(accounts);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
   
}