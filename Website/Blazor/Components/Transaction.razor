@using Blazor.Services.Http
@using global::Shared.DTOs
@inject ITransactionService transactionService


<div class="transaction-box">
    <div class="leftPart">
        <p class="title">@senderName</p>
        <p class="time">@Date.Hour:@Date.Minute</p>
        <p class="date">@Date.Day/@Date.Month/@Date.Year</p>
    </div>
    <div class="midPart">
        @if (!Message.Equals("deposit") || !Message.Equals("interest"))
        {
            <p class="message">@Message</p>
        }
    </div>
    <div class="rightPart">
        @if (senderName.Equals("Deposit") || senderName.Equals("Interest"))
        {
            <p style="color: green">@sign@Amount DKK</p>
        }
        else
        {
            <p style="color: red;">@sign@Amount DKK</p>
        }
        <AuthorizeView Policy="MustBeEmployee">
            <button @onclick="() => FlagUser(SenderId)">Flag Sender</button>
        </AuthorizeView>
    </div>
</div>

@code {
    [Parameter] public string Recipient { get; set; }
    [Parameter] public string Sender { get; set; }
    [Parameter] public double Amount { get; set; }
    [Parameter] public string Message { get; set; }
    [Parameter] public DateTime Date { get; set; }
    [Parameter] public int SenderId { get; set; }

    private string senderName;
    private string sign;
    
    protected override async void OnInitialized()
    {
        senderName = await CheckName();
    }

    private async Task<string> CheckName()
    {
        if (Sender.Equals(Recipient) && Message.Equals("deposit"))
        {
            sign = "+";
            return "Deposit";
        }
        if (Sender.Equals(Recipient) && Message.Equals("interest"))
        {
            sign = "+";
            return "Interest";
        }
        sign = "-";
        return "Transfer";
    }

    protected async Task FlagUser(int id)
    {
        FlagUserDto dto = new FlagUserDto
        {
            SenderId = id
        };
        await transactionService.FlagUser(dto);
    }
    
    
    
    

}