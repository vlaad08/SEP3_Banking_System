@using System.Security.Claims
@using Blazor.Services
@using global::Shared.DTOs
@using global::Shared.Models
@using Newtonsoft.Json
@inject ILoanService loanService

<div class="content">
    <div class="card">
        <div>
            <select @onchange="OnAccountSelectionChanged">
                @foreach (var account in Accounts)
                {
                    if (account.AccountType.Equals("personal"))
                    {
                        <option value="@account.AccountNumber">@account.Balance DKK - @account.AccountType.ToUpperInvariant()</option>     
                    }
                }
                @foreach (var account in Accounts)
                {
                    if (account.AccountType.Equals("savings"))
                    {
                        <option value="@account.AccountNumber">@account.Balance DKK - @account.AccountType.ToUpperInvariant()</option>     
                    }
                }
                @foreach (var account in Accounts)
                {
                    if (account.AccountType.Equals("business"))
                    {
                        <option value="@account.AccountNumber">@account.Balance DKK - @account.AccountType.ToUpperInvariant()</option>     
                    }
                }
            </select>
        </div>
        <div>
            <label>Amount: </label>
            <input type="number" placeholder="Amount in Danish Krone" @bind="principle">
        </div>
        <div>
            <lable>Duration (in months): </lable>
            <input type="number" placeholder="Min. 6 - Max. 60" @bind="tenure">
        </div>
        <div class="submitButton">
            <button @onclick="Calculate">Calculate Loan</button>
            <button @onclick="Create">Request Loan</button>
        </div>
    </div>
</div>
<Notification @ref="interestNotification" NotificationType="Confirmation">Your calculated interest rate: @interestRate</Notification>

@code {
    private string SelectedAccount { get; set; }
    [Parameter] public ClaimsPrincipal User { get; set; }
    private List<AccountsInfo> Accounts;
    private double principle;
    private int tenure;
    private string accountNumber = "";
    private Notification interestNotification;
    private string interestRate;
    
    private Task OnAccountSelectionChanged(ChangeEventArgs e)
    {
        accountNumber = e.Value!.ToString()!;
        Console.WriteLine(accountNumber);
        return Task.CompletedTask;
    }
    
    protected override async Task OnInitializedAsync()
    {
        Accounts = await GetUserAccounts(User) ?? new List<AccountsInfo>();
        var personalAccount = Accounts.FirstOrDefault(a => a.AccountType.Equals("personal"));
        if (personalAccount != null)
        {
            accountNumber = personalAccount.AccountNumber;
        }var businessAccount = Accounts.FirstOrDefault(a => a.AccountType.Equals("business"));
        if (businessAccount != null)
        {
            accountNumber = businessAccount.AccountNumber;
        }
    }

    private async void Calculate()
    {
        LoanRequestDto dto = new LoanRequestDto(accountNumber, principle, tenure);
        interestRate = await loanService.LoanCalculation(dto);
        interestNotification.ShowNotification();
    }

    private async void Create()
    {
        LoanRequestDto dto = new LoanRequestDto(accountNumber, principle, tenure);
        await loanService.RequestLoan(dto);
    }

    private async Task<List<AccountsInfo>> GetUserAccounts(ClaimsPrincipal user)
    {
        var accountsClaim = user.FindFirst("Accounts");

        if (accountsClaim == null || string.IsNullOrEmpty(accountsClaim.Value))
        {
            Console.WriteLine("Accounts claim is null or empty");
            return new List<AccountsInfo>();
        }

        try
        {
            return JsonConvert.DeserializeObject<List<AccountsInfo>>(accountsClaim.Value) ?? new List<AccountsInfo>();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error in GetUserAccounts: {e.Message}");
            return new List<AccountsInfo>();
        }
    }

   
}