@using Blazor.Services.Http
@using System.Security.Claims
@using global::Shared.Models
@using Newtonsoft.Json
@inject NavigationManager navMgr
@inject ITransactionService transactioService

<div class="content">
    
    <div class="card">
        <div>
            <label>Your account: </label>
            <select @bind="SelectedAccount">
                @if (Accounts != null)
                {
                    @foreach (var account in Accounts)
                    {
                        if (account.AccountType.Equals("personal"))
                        {
                            <option>@account.Balance DKK - @account.AccountType.ToUpperInvariant()</option>     
                        }
                    }
                    @foreach (var account in Accounts)
                    {
                        if (account.AccountType.Equals("savings"))
                        {
                            <option>@account.Balance DKK - @account.AccountType.ToUpperInvariant()</option>     
                        }
                    }
                }
            </select>
        </div>
        <div>
            <label>Card number: </label>
            <input type="text">
        </div>
        <div>
            <label>Amount: </label>
            <input type="number" placeholder="Amount in Danish Krone" @bind="amount">
        </div>
        <div class="submitButton">
            <button @onclick="Create">Top Up</button>
        </div>
    </div>
</div>

@code
{
    private string SelectedAccount { get; set; }
    [Parameter] public ClaimsPrincipal User { get; set; }
    private string accountNumber = "";
    private double amount;
    private List<AccountsInfo> Accounts = new List<AccountsInfo>();
    
    private async Task Create()
    {
        try
        {
            await transactioService.Deposit(accountNumber, amount);
        }
        catch (Exception e)
        {
            throw e;
        }
    }
    
    private Task OnAccountSelectionChanged(ChangeEventArgs e)
    {
        accountNumber = e.Value!.ToString()!;
        return Task.CompletedTask;
    }
    
    protected override async Task OnInitializedAsync()
    {
        Accounts = await GetUserAccounts(User) ?? new List<AccountsInfo>();
    }
    
    private async Task<List<AccountsInfo>> GetUserAccounts(ClaimsPrincipal user)
    {
        if (user == null)
        {
            Console.WriteLine("User is null");
            return new List<AccountsInfo>();
        }

        var accountsClaim = user.FindFirst("Accounts");
        if (accountsClaim == null || string.IsNullOrEmpty(accountsClaim.Value))
        {
            Console.WriteLine("Accounts claim is null or empty");
            return new List<AccountsInfo>();
        }

        try
        {
            List<AccountsInfo> accounts = JsonConvert.DeserializeObject<List<AccountsInfo>>(accountsClaim.Value);
            if (accounts != null && accounts.Any())
            {
                var personalAccount = accounts.FirstOrDefault(a => a.AccountType.Equals("personal"));
                if (personalAccount != null)
                {
                    accountNumber = personalAccount.AccountNumber;
                }
            }
            return accounts ?? new List<AccountsInfo>();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error in GetUserAccounts: {e.Message}");
            return new List<AccountsInfo>();
        }
    }
}