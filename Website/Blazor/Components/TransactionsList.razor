@using Blazor.Components
@using Blazor.Services.Http
@using System.Security.Claims
@inject ITransactionService transactionService
@inject AuthenticationStateProvider AuthenticationStateProvider


<!-- Maybe have a search bar over here, to look for some transactions made to/from a specific person/merchant -->

<div class="content">
    
    <div class="card">
        <div class="search-bar">
            <input type="text" placeholder="Looking for a transaction" class="s">
        </div>
        
        <div class="transactions-list">
            @if (transactions != null)
            {
                @foreach(var transaction in transactions)
                {
                    <Transaction Recipient="@transaction.RecipientName"
                                 Sender="@transaction.SenderName"
                                 Message="@transaction.Message"
                                 Amount="@transaction.Amount"
                                 Date="@transaction.Date"
                                 SenderId="@transaction.SenderId"
                                 SenderAccountNumber="@transaction.SenderAccountNumber"
                                 TransactionType="@transaction.transactionType"></Transaction>
                }
            }
        </div>
    </div>
</div>


@code {
    [Parameter]public LoadingBox Loading { get; set; }
    [Parameter] public string Email { get; set; }
    [Parameter] public ClaimsPrincipal User { get; set; }
    private string role = "";
    public List<global::Shared.Models.Transaction> transactions = new List<global::Shared.Models.Transaction>(); 

    private async Task RequestInformation()
    {
        if (role.Equals("Employee"))
        {
            transactions = await GetTransactions() ?? new List<global::Shared.Models.Transaction>();

        }
        if (role.Equals("Client"))
        {
            transactions = await GetTransactions(Email) ?? new List<global::Shared.Models.Transaction>(); 
        }
    }

    private async Task<List<global::Shared.Models.Transaction>> GetTransactions(string email)
    {
        return await transactionService.GetTransactions(email);
    }
    private async Task<List<global::Shared.Models.Transaction>> GetTransactions()
    {
        return (List<global::Shared.Models.Transaction>)await transactionService.GetTransactions();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        role = user.FindFirst(ClaimTypes.Role).Value;
        Loading.ShowLoading();
        await RequestInformation();
        Loading.CloseLoading();
    }
}