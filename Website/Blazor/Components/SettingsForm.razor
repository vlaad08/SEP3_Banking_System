@using global::Shared.Models
@using Blazor.Components
@using Blazor.Services.Http
@using System.Security.Claims
@using System.Reflection.Metadata
@using Blazor.Services
@using global::Shared.DTOs
@using Newtonsoft.Json
@inject ITransactionService transactionService
@inject ISettingsService settingsService

<div class="content">
    <div class="card">
        <div class="user-details">
            <h3>Account details</h3>
            @foreach (var user in Users)
            {
                if (@user.AccountType.Equals("personal"))
                {
                    <label>User's name: @user.AccountOwner</label>
                    <label>User's email: @Email</label>
                    <label>User's current membership: @Role</label>
                    <label>User's personal account number: @FormatAccountNumber(user.AccountNumber)</label>
                }
                if (@user.AccountType.Equals("savings"))
                {
                    <label>User's savings account number: @FormatAccountNumber(user.AccountNumber)</label>
                }
                if (@user.AccountType.Equals("business"))
                {
                    <label>User's business account number: @FormatAccountNumber(user.AccountNumber)</label>
                }
                
            }
            
        </div>
    </div>
</div>
<div class="userDetailsButton">
    <button  @onclick="ChangePassword">Change password</button>
    
    

</div>

<button class="btn btn-primary" @onclick="ToggleMenu">Change Email</button>
 <button class="userPlansButton" @onclick="ToggleChangePlans">Change Plans</button>

@if (isMenuVisible)
{
    isChangePlansVisible = false;
    <div class="menu">
        <label>Type new Email:</label>
        <input type="text" placeholder="new email" @bind="newemail1"/>

        <label>Confirm Email:</label>
        <input type="text" placeholder="confirm email" @bind="newemail"/>

        <button @onclick="UpdateEmail" class="btn btn-success" >Save Changes</button>
    </div>
}

@if (isChangePlansVisible)
{
    isMenuVisible = false;
    <div class="plansBox">
        <div class="plan">
            <p class="planTitle">Default</p>
            <ul class="benefits">
                <li>Up to 3 bank accounts (personal, savings, business)</li>
                <li>Secure account in the system</li>
                <li>Base interest rate: 1.7%</li>
            </ul>
            <button @onclick="UpdatePlanToDefault">Select this plan</button>
        </div>
        
        <div class="plan">
            <p class="planTitle">Premium</p>
            <ul class="benefits">
                <li>Up to 3 bank accounts (personal, savings, business)</li>
                <li>Secure account in the system</li>
                <li>Base interest rate: 3.7%</li>
                <li>Fast response time from employees</li>
            </ul>
            <button @onclick="UpdatePlanToPremium">Select this plan</button>
        </div>
    </div>
}

@code
{   
    [Parameter] public ClaimsPrincipal User { get; set; }
    [Parameter] public string Email { get; set; }
    [Parameter] public string Role { get; set; }
    [Parameter]public LoadingBox Loading { get; set; }
    private List<AccountsInfo> Users { get; set; }
    private string SelectedAccount { get; set; }
    private bool isMenuVisible = false;
    private bool isChangePlansVisible = false;
    private string newemail;
    private string newemail1;
    private string rolepremium="Premium";
    private string roledefault = "Default";
    private string Password = "12345678";
  


    [Inject] private NavigationManager Navigation { get; set; }

    protected override async Task OnInitializedAsync()
    {

        Users = await GetUserAccounts(User);
        Email = User.FindFirst("Email").Value;
        Role = User.FindFirst(ClaimTypes.Role).Value;
        

    }

    private Task<List<AccountsInfo>> GetUserAccounts(ClaimsPrincipal user)
    {
        var accountsClaim = user.FindFirst("Accounts");

        try
        {
            List<AccountsInfo> accounts = JsonConvert.DeserializeObject<List<AccountsInfo>>(accountsClaim!.Value)!;
            return Task.FromResult(accounts);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    private void ChangePassword()
    {
        Loading.ShowLoading();
        Navigation.NavigateTo("/Changepassword");
    }
    
    private string FormatAccountNumber(string accountNumber)
    {
        if (accountNumber.Length >= 16)
        {
            return $"{accountNumber.Substring(0, 4)}{new string('*', 8)}{accountNumber.Substring(12)}";
        }
        else
        {
            return accountNumber;
        }
    }
    
    private void ToggleMenu()
    {
        isMenuVisible = !isMenuVisible;
    }
    
    private void ToggleChangePlans()
    {
        isChangePlansVisible = !isChangePlansVisible;
    }

    private async Task UpdateEmail()
    {
        if (newemail.Equals(newemail1))
        {
            try
            {
                await settingsService.UpdateUserDetails(newemail,Email, Password, Role );
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
            
        }
    }
    
    private async Task UpdatePlanToDefault()
    {
            try
            {
                await settingsService.UpdateUserDetails(Email, Email, Password,roledefault);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
    }
    private async Task UpdatePlanToPremium()
    {
        try
        {
            await settingsService.UpdateUserDetails(Email, Email, Password, rolepremium);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
}


