@using global::Shared.Models
@using System.Security.Claims
@using Blazor.Services.Http
@using Newtonsoft.Json
@attribute [Authorize]
@inject NavigationManager navMgr
@inject ITransactionService transactioService


<div class="content">
    
    <div class="card">
        <div>
            <label>Your account: </label>
            <select @onchange="OnAccountSelectionChanged">
                @foreach (var account in Accounts)
                {
                    if (account.AccountType.Equals("personal"))
                    {
                        <option value="@account.AccountNumber">@account.Balance DKK - @account.AccountType.ToUpperInvariant()</option>     
                    }
                }
                @foreach (var account in Accounts)
                {
                    if (account.AccountType.Equals("savings"))
                    {
                        <option value="@account.AccountNumber">@account.Balance DKK - @account.AccountType.ToUpperInvariant()</option>     
                    }
                }
                @foreach (var account in Accounts)
                {
                    if (account.AccountType.Equals("business"))
                    {
                        <option value="@account.AccountNumber">@account.Balance DKK - @account.AccountType.ToUpperInvariant()</option>     
                    }
                }
            </select>
        </div>
        <div>
            <label>Receiver's account number: </label>
            <input type="text" @bind="recipientAccount_id">
        </div>
        <div>
            <label>Amount: </label>
            <input type="number" placeholder="Amount in Danish Krone" @bind="amount">
        </div>
        <div>
            <label>Message for receiver: </label>
            <input type="text" @bind="message">
        </div>
        <div class="submitButton">
            <button @onclick="Create">Submit Transfer</button>
        </div>
    </div>
</div>
<Notification @ref="confirmRef" NotificationType="Confirmation">Transfer Request has Been Sent</Notification>
<Notification @ref="errorRef" NotificationType="Error">There Was A Problem</Notification>
<Notification @ref="successRef" NotificationType="Confirmation">The Transfer was successful</Notification>


@code {
    [Parameter] public ClaimsPrincipal User { get; set; }
    private Notification confirmRef;
    private Notification errorRef;
    private Notification successRef;
    private string senderAccount_id = "";
    private string recipientAccount_id = "";
    private string message = "";
    private double amount;
    private List<AccountsInfo> Accounts { get; set; } 
    
   
    
    private Task OnAccountSelectionChanged(ChangeEventArgs e)
    {
        senderAccount_id = e.Value!.ToString()!;
        Console.WriteLine(senderAccount_id);
        return Task.CompletedTask;
    }
    
    private async Task Create()
    {
        try
        {
            await confirmRef.ShowNotification();

            if (senderAccount_id.Equals("") || recipientAccount_id.Equals(""))
            {
                await errorRef.ShowErrorNotification("Please fill out all the fields correctly");
            }
            else
            {
                await transactioService.Transfer(senderAccount_id, recipientAccount_id, amount, message);
                await successRef.ShowNotification();
            }
            
        }
        catch (Exception e)
        {
            await errorRef.ShowErrorNotification(e.Message);
        }
            
    }
    
    private void GoOn()
    {
        navMgr.NavigateTo("/Transactions");
    }
    
    protected override async Task OnInitializedAsync()
    {
        Accounts = await GetUserAccounts(User) ?? new List<AccountsInfo>();
        var personalAccount = Accounts.FirstOrDefault(a => a.AccountType.Equals("personal"));
        
        if (personalAccount != null)
        {
            senderAccount_id = personalAccount.AccountNumber;
        }var businessAccount = Accounts.FirstOrDefault(a => a.AccountType.Equals("business"));
        if (businessAccount != null)
        {
            senderAccount_id = businessAccount.AccountNumber;
        }
    }

    private async Task<List<AccountsInfo>> GetUserAccounts(ClaimsPrincipal user)
    {
        var accountsClaim = user.FindFirst("Accounts");

        if (accountsClaim == null || string.IsNullOrEmpty(accountsClaim.Value))
        {
            Console.WriteLine("Accounts claim is null or empty");
            return new List<AccountsInfo>();
        }

        try
        {
            return JsonConvert.DeserializeObject<List<AccountsInfo>>(accountsClaim.Value) ?? new List<AccountsInfo>();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error in GetUserAccounts: {e.Message}");
            return new List<AccountsInfo>();
        }
    }

    

}